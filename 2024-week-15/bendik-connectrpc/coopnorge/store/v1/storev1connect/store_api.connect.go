// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: coopnorge/store/v1/store_api.proto

package storev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/coopnorge/bendik-connectrpc/coopnorge/store/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StoreInformationAPIName is the fully-qualified name of the StoreInformationAPI service.
	StoreInformationAPIName = "coopnorge.store.v1.StoreInformationAPI"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StoreInformationAPIGetStoreProcedure is the fully-qualified name of the StoreInformationAPI's
	// GetStore RPC.
	StoreInformationAPIGetStoreProcedure = "/coopnorge.store.v1.StoreInformationAPI/GetStore"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	storeInformationAPIServiceDescriptor        = v1.File_coopnorge_store_v1_store_api_proto.Services().ByName("StoreInformationAPI")
	storeInformationAPIGetStoreMethodDescriptor = storeInformationAPIServiceDescriptor.Methods().ByName("GetStore")
)

// StoreInformationAPIClient is a client for the coopnorge.store.v1.StoreInformationAPI service.
type StoreInformationAPIClient interface {
	// This method returns a single store based in the ID in the request.
	GetStore(context.Context, *connect.Request[v1.GetStoreRequest]) (*connect.Response[v1.GetStoreResponse], error)
}

// NewStoreInformationAPIClient constructs a client for the coopnorge.store.v1.StoreInformationAPI
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStoreInformationAPIClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StoreInformationAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &storeInformationAPIClient{
		getStore: connect.NewClient[v1.GetStoreRequest, v1.GetStoreResponse](
			httpClient,
			baseURL+StoreInformationAPIGetStoreProcedure,
			connect.WithSchema(storeInformationAPIGetStoreMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// storeInformationAPIClient implements StoreInformationAPIClient.
type storeInformationAPIClient struct {
	getStore *connect.Client[v1.GetStoreRequest, v1.GetStoreResponse]
}

// GetStore calls coopnorge.store.v1.StoreInformationAPI.GetStore.
func (c *storeInformationAPIClient) GetStore(ctx context.Context, req *connect.Request[v1.GetStoreRequest]) (*connect.Response[v1.GetStoreResponse], error) {
	return c.getStore.CallUnary(ctx, req)
}

// StoreInformationAPIHandler is an implementation of the coopnorge.store.v1.StoreInformationAPI
// service.
type StoreInformationAPIHandler interface {
	// This method returns a single store based in the ID in the request.
	GetStore(context.Context, *connect.Request[v1.GetStoreRequest]) (*connect.Response[v1.GetStoreResponse], error)
}

// NewStoreInformationAPIHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStoreInformationAPIHandler(svc StoreInformationAPIHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	storeInformationAPIGetStoreHandler := connect.NewUnaryHandler(
		StoreInformationAPIGetStoreProcedure,
		svc.GetStore,
		connect.WithSchema(storeInformationAPIGetStoreMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/coopnorge.store.v1.StoreInformationAPI/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StoreInformationAPIGetStoreProcedure:
			storeInformationAPIGetStoreHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStoreInformationAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedStoreInformationAPIHandler struct{}

func (UnimplementedStoreInformationAPIHandler) GetStore(context.Context, *connect.Request[v1.GetStoreRequest]) (*connect.Response[v1.GetStoreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coopnorge.store.v1.StoreInformationAPI.GetStore is not implemented"))
}
